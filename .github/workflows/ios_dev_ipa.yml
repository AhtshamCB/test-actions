name: 'Build iOS Dev ipa'

env:
  WORKPLACE: ${{ 'ios/teefiapp.xcworkspace' }}
  SCHEME: ${{ 'TeeFiAppDev' }}
  CONFIGURATION: ${{ 'ReleaseDev' }}
  ARCHIVE_PATH: ${{ 'ios/build/TeeFiAppDev.xcarchive' }}
  PLIST_PATH: ${{'ios/Dev/exportOptions.plist' }}
  IPA_PATH: ${{ 'ios/build/' }}

  ARTIFACT_NAME: ${{ 'teefiapp' }}
  IPA_UPLOAD_PATH: ${{ 'build/TeeFiApp.ipa' }}

  SEC_IOS_CERTIFICATE_P12: ${{ secrets.IOS_CERTIFICATE_P12 }}
  SEC_IOS_CERTIFICATE_PWD: ${{ secrets.IOS_CERTIFICATE_PWD }}
  SEC_IOS_PROVISIONING_PROFILE: ${{secrets.IOS_PROVISIONING_PROFILE_DEV }}
  SEC_IOS_KEYCHAIN_PWD: ${{ secrets.IOS_KEYCHAIN_PWD }}

  SEC_IOS_API_KEY_ID: ${{ secrets.IOS_API_KEY_ID }}
  SEC_IOS_ISSUER_ID: ${{ secrets.IOS_ISSUER_ID }}

on:
  workflow_dispatch:
    branches: [develop]

jobs:
  build_ios_dev_ipa:
    runs-on: macos-latest
    steps:
      - name: check Xcode version
        run: /usr/bin/xcodebuild -version

      - name: Install the Apple certificate and provisioning profile
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$SEC_IOS_CERTIFICATE_P12" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$SEC_IOS_PROVISIONING_PROFILE" | base64 --decode -o $PP_PATH

          # create temporary keychain
          security create-keychain -p "$SEC_IOS_KEYCHAIN_PWD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$SEC_IOS_KEYCHAIN_PWD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$SEC_IOS_CERTIFICATE_PWD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      - name: checkout repository
        uses: actions/checkout@v3

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'yarn' # or 'npm' and 'pnpm'

      - name: Cache node_modules
        id: modules-cache
        uses: actions/cache@v3
        with:
          path: ./node_modules
          key: ${{ runner.os }}-modules-${{ hashFiles('yarn.lock') }}

      - name: Install node_modules if necessary
        if: steps.modules-cache.outputs.cache-hit != 'true'
        shell: bash
        run: |
          npm i -g corepack 
          yarn install --frozen-lockfile

      - name: Cache Pods
        if: runner.os == 'macOS'
        uses: actions/cache@v3
        id: pods-cache
        with:
          path: ./ios/Pods
          key: ${{ runner.os }}-pods-${{ hashFiles('ios/Podfile.lock') }}

      - name: Install pods
        if: runner.os == 'macOS'
        shell: bash
        run: cd ios && pod install && cd ..

      - name: build archive
        run: |
          xcodebuild -workspace $WORKPLACE -scheme $SCHEME -configuration $CONFIGURATION \
          archive -archivePath $ARCHIVE_PATH -allowProvisioningUpdates
          PROVISIONING_STYLE="Manual" \
          PROVISIONING_PROFILE={$SEC_IOS_PROVISIONING_PROFILE} \
          CODE_SIGN_STYLE="Manual" \
          CODE_SIGN_IDENTITY={$SEC_IOS_CERTIFICATE_P12} \

      # xcodebuild -exportArchive -archivePath ./TeeFiAppDev.xcarchive -exportOptionsPlist .  -exportPath teefi.ipa
      - name: export ipa
        run: |
          xcodebuild -exportArchive \
          -archivePath $ARCHIVE_PATH \
          -exportOptionsPlist $PLIST_PATH \
          -exportPath $IPA_PATH

      - name: Upload application
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: |
            ${{ env.IPA_PATH }}
          retention-days: 3

      - name: deploy to ios testflight
        run: |
          cd ios
          xcrun altool --upload-app -f "${{ env.IPA_UPLOAD_PATH }}" -t ios --apiKey "${{ env.SEC_IOS_API_KEY_ID }}" --apiIssuer "${{ env.SEC_IOS_ISSUER_ID }}"
